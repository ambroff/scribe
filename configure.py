#!/usr/bin/env python

"""Run cmake to configure build and generate build directory."""

import errno
import os
import optparse
import shutil
import subprocess
import sys

def configure():
    options = parse_args()

    src_root = get_src_root()
    build_dir = os.path.join(src_root, 'build')

    try:
        os.makedirs(build_dir)
    except OSError, e:
        if e.errno != errno.EEXIST:
            raise

    args = ['cmake', '..']

    if options.debug:
        args.append('-DCMAKE_BUILD_TYPE:STRING=Debug')
    else:
        args.append('-DCMAKE_BUILD_TYPE:STRING=Release')

    if options.prefix:
        prefix = os.path.realpath(options.prefix)
        args.append('-DCMAKE_INSTALL_PREFIX:STRING=%s' % prefix)

    env = os.environ.copy()
    if options.use_clang:
        env.update({'CC': 'clang', 'CXX': 'clang++'})
        args.append('-DFORCE_USE_CLANG:BOOL=ON')

    try:
        subprocess.check_call(args, cwd=build_dir, env=env)
        write_root_makefile(src_root)
    except OSError, e:
        if e.errno == errno.ENOENT:
            print >> sys.stderr, 'ERROR: You must have cmake installed. ' \
                'Please install with your package manager, or download from ' \
                'http://www.cmake.org/.'
            sys.exit(1)
        else:
            raise
    except subprocess.CalledProcessError, e:
        print >> sys.stderr, 'ERROR: Failed to run cmake. Deleting build ' \
            'directory.'
        shutil.rmtree(build_dir)
        sys.exit(1)

MAKEFILE = """\
# Automatically generated by configure.py

all:
	+$(MAKE) -C $(CURDIR)/build

%:
	+$(MAKE) -C $(CURDIR)/build $@

distclean:
	-rm -rvf $(CURDIR)/build $(CURDIR)/Makefile
"""

def write_root_makefile(srcroot):
    f = open(os.path.join(srcroot, 'Makefile'), 'w')
    try:
        f.write(MAKEFILE)
    finally:
        f.close()

def get_src_root():
    """Returns absolute path to the root of the source tree."""
    return os.path.realpath(os.path.dirname(__file__))

def parse_args():
    p = optparse.OptionParser(usage='%prog [OPTIONS]', description=__doc__)
    p.add_option(
        '--enable-debug', dest='debug', default=False, action='store_true',
        help='Unoptimized builds with debug symbols.')
    p.add_option(
        '--prefix', dest='prefix', default=None,
        help='Optional install prefix. Default (probably): /usr/local')
    p.add_option(
        '--use-clang', dest='use_clang', default=False, action='store_true',
        help='Use clang as the C++ compiler.')
    options, args = p.parse_args()
    if args:
        p.error('Unexpected arguments: %s' % ', '.join(args))
    return options

if __name__ == '__main__':
    configure()
